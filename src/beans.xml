<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context-3.0.xsd
    	http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    	http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.baodian" />
	
<!-- 整合hibernate -->
	<!-- 读取数据库配置文件 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置数据源连接数据库 -->
	<bean id="dataSource" destroy-method="close"
		  class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 检查全部链接，只保留minPoolSize数量，其余丢弃 -->
		<property name="maxIdleTimeExcessConnections" value="120" />
		<!-- 对空闲链接进行重新连接 -->
		<property name="idleConnectionTestPeriod" value="1800" />
		<!-- 最大连接数，默认15 -->
		<property name="maxPoolSize" value="80" />
		<!-- 初始化时创建的连接数，默认5 -->
		<property name="initialPoolSize" value="1" />
		<!-- 最小连接数，默认1 -->
		<property name="minPoolSize" value="1" />
		<!-- 连接用完时，一次性创建新连接的数目，默认3 -->
		<property name="acquireIncrement" value="1" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- 配置sessionFactory(hibernate的配置) -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		 <property name="packagesToScan"><!-- 自动扫描包 -->
			<list>
				<value>com.baodian.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
	</bean>
	<!-- 声明式事务管理 -->
	<bean id="transactionManager"
		  class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 定义切入点和使用策略,多个execution:同时'&&',或者:'||',不匹配:'!'-->
	<aop:config>
		<aop:pointcut id="bussinessService"
		    expression="execution(public * com.baodian.service.*.impl.*.*(..)) ||
				execution(public * com.baodian.service.*.*(..))" />
		<aop:advisor pointcut-ref="bussinessService"
			advice-ref="txAdvice" />
	</aop:config>
	<!-- 配置切入点事务的策略 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="init*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"/>
			<!-- <tx:method name="*" read-only="true"/> -->
		</tx:attributes>
	</tx:advice>
	<!-- HibernateTemplate -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

<!-- hessian客户端 -->
	<bean id="serverManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/serverHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.server.ServerManager"/>  
	</bean>
	<bean id="cabinetManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/cabinetHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.server.CabinetManager"/>  
	</bean>
	<bean id="roomManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/roomHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.server.RoomManager"/>  
	</bean>
	<bean id="styleManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/styleHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.server.StyleManager"/>  
	</bean>
	<bean id="ingredientManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/ingredientHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.IngredientManager"/>  
	</bean>
	<bean id="ingredientDefineManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/ingredientDefineHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.IngredientDefineManager"/>  
	</bean>
	<bean id="arenaManager" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">  
	    <property name="serviceUrl" value="${hessian.serverUrl}/arenaHessianService_no"/>  
	    <property name="serviceInterface" value="cn.onecloud.service.cmdb.ArenaManager"/>  
	</bean>

</beans>